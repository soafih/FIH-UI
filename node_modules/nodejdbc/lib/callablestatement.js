// Generated by CoffeeScript 1.9.3
(function() {
  var CallableStatement, PreparedStatement, Promise, java,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  PreparedStatement = require('./preparedstatement');

  java = require('java');

  module.exports = CallableStatement = (function(superClass) {
    extend(CallableStatement, superClass);

    function CallableStatement(callableStatement) {
      CallableStatement.__super__.constructor.call(this, callableStatement);
      this.callableStatement = Promise.promisifyAll(callableStatement);
    }

    CallableStatement.prototype.registerOutParameter = function(index, type) {
      return this.callableStatement.registerOutParameterSync(index, this.getType(type));
    };

    CallableStatement.prototype.getString = function(index) {
      return this.callableStatement.getStringSync(index);
    };

    CallableStatement.prototype.getInt = function(index) {
      return this.callableStatement.getIntSync(index);
    };

    CallableStatement.prototype.getType = function(type) {
      return java.getStaticFieldValue("java.sql.Types", type);
    };

    return CallableStatement;

  })(PreparedStatement);

}).call(this);
